# Main Quality Pipeline - GitHub Actions Quality Automation
# Orchestrates all quality checks in a single, fast pipeline

name: üîç Quality Pipeline

on:
  pull_request:
    branches: [ main, develop, master ]
  push:
    branches: [ main, develop, master ]
  workflow_dispatch:

env:
  FORCE_COLOR: 1
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  PHP_VERSION: '8.2'

jobs:
  detect-languages:
    name: üîç Detect Languages
    runs-on: ubuntu-latest
    outputs:
      javascript: ${{ steps.detect.outputs.javascript }}
      python: ${{ steps.detect.outputs.python }}
      php: ${{ steps.detect.outputs.php }}
      has_changes: ${{ steps.changes.outputs.has_changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect languages and changes
        id: detect
        run: |
          if [[ -f "package.json" ]] || find . -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -maxdepth 3 | grep -q .; then
            echo "javascript=true" >> $GITHUB_OUTPUT
            echo "üü® Detected: JavaScript/TypeScript/React"
          else
            echo "javascript=false" >> $GITHUB_OUTPUT
          fi
          
          if find . -name "*.py" -maxdepth 3 | grep -q .; then
            echo "python=true" >> $GITHUB_OUTPUT
            echo "üêç Detected: Python"
          else
            echo "python=false" >> $GITHUB_OUTPUT
          fi
          
          if find . -name "*.php" -maxdepth 3 | grep -q .; then
            echo "php=true" >> $GITHUB_OUTPUT
            echo "üêò Detected: PHP"
          else
            echo "php=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            changed_files=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
            if [[ -n "$changed_files" ]]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "üìù Changes detected in PR"
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "üìù Push event detected"
          fi

  javascript-quality:
    name: üü® JavaScript/TypeScript Quality
    runs-on: ubuntu-latest
    needs: detect-languages
    if: needs.detect-languages.outputs.javascript == 'true' && needs.detect-languages.outputs.has_changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          echo "üì¶ Dependencies installed"

      - name: ESLint check
        run: |
          echo "üîç Running ESLint..."
          npm run lint
          echo "‚úÖ ESLint passed"

      - name: Prettier check
        run: |
          echo "üé® Checking Prettier formatting..."
          npx prettier --check .
          echo "‚úÖ Prettier formatting is correct"

      - name: TypeScript type check
        run: |
          if [[ -f "tsconfig.json" ]]; then
            echo "üîß Running TypeScript type check..."
            npx tsc --noEmit
            echo "‚úÖ TypeScript type check passed"
          else
            echo "‚ÑπÔ∏è No TypeScript configuration found, skipping type check"
          fi

      - name: Run tests
        run: |
          if npm run test --if-present; then
            echo "‚úÖ Tests passed"
          else
            echo "‚ö†Ô∏è Tests failed or not configured"
            exit 1
          fi

  python-quality:
    name: üêç Python Quality
    runs-on: ubuntu-latest
    needs: detect-languages
    if: needs.detect-languages.outputs.python == 'true' && needs.detect-languages.outputs.has_changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 pytest pytest-cov
          
          if [[ -f "requirements.txt" ]]; then
            pip install -r requirements.txt
          elif [[ -f "pyproject.toml" ]]; then
            pip install -e .
          fi
          echo "üì¶ Python dependencies installed"

      - name: Black formatting check
        run: |
          echo "üñ§ Checking Black formatting..."
          black --check --diff .
          echo "‚úÖ Black formatting is correct"

      - name: isort import sorting check
        run: |
          echo "üìö Checking import sorting..."
          isort --check-only --diff .
          echo "‚úÖ Import sorting is correct"

      - name: flake8 linting
        run: |
          echo "üîç Running flake8..."
          flake8 .
          echo "‚úÖ flake8 linting passed"

      - name: Run tests
        run: |
          if find . -name "test_*.py" -o -name "*_test.py" | grep -q .; then
            echo "üß™ Running Python tests..."
            pytest -v
            echo "‚úÖ Python tests passed"
          else
            echo "‚ÑπÔ∏è No Python tests found"
          fi

  php-quality:
    name: üêò PHP Quality
    runs-on: ubuntu-latest
    needs: detect-languages
    if: needs.detect-languages.outputs.php == 'true' && needs.detect-languages.outputs.has_changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo, dom, filter, gd, json
          tools: composer, php-cs-fixer, phpstan

      - name: Install dependencies
        run: |
          if [[ -f "composer.json" ]]; then
            composer install --prefer-dist --no-progress --no-interaction
            echo "üì¶ Composer dependencies installed"
          fi

      - name: PHP CS Fixer check
        run: |
          if [[ -f ".php-cs-fixer.php" ]]; then
            echo "üé® Checking PHP CS Fixer formatting..."
            php-cs-fixer fix --dry-run --diff --verbose
            echo "‚úÖ PHP CS Fixer formatting is correct"
          fi

      - name: PHPStan analysis
        run: |
          if [[ -f "phpstan.neon" ]] || [[ -f "phpstan.neon.dist" ]]; then
            echo "üîç Running PHPStan analysis..."
            phpstan analyse --no-progress
            echo "‚úÖ PHPStan analysis passed"
          fi

      - name: Run tests
        run: |
          if [[ -f "phpunit.xml" ]] || find . -name "*Test.php" | grep -q .; then
            echo "üß™ Running PHP tests..."
            if command -v phpunit &> /dev/null; then
              phpunit
            elif [[ -f "vendor/bin/phpunit" ]]; then
              ./vendor/bin/phpunit
            fi
            echo "‚úÖ PHP tests passed"
          else
            echo "‚ÑπÔ∏è No PHP tests found"
          fi

  security-checks:
    name: üîí Security & Dependencies
    runs-on: ubuntu-latest
    needs: detect-languages
    if: needs.detect-languages.outputs.has_changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  quality-gate:
    name: ‚úÖ Quality Gate
    runs-on: ubuntu-latest
    needs: 
      - detect-languages
      - javascript-quality
      - python-quality
      - php-quality
      - security-checks
    if: always() && needs.detect-languages.outputs.has_changes == 'true'
    steps:
      - name: Check all jobs status
        run: |
          echo "üîç Checking quality gate status..."
          
          js_status="${{ needs.javascript-quality.result }}"
          py_status="${{ needs.python-quality.result }}"
          php_status="${{ needs.php-quality.result }}"
          security_status="${{ needs.security-checks.result }}"
          
          echo "JavaScript/TypeScript: $js_status"
          echo "Python: $py_status"
          echo "PHP: $php_status"
          echo "Security: $security_status"
          
          failed_jobs=()
          
          if [[ "$js_status" == "failure" ]]; then
            failed_jobs+=("JavaScript/TypeScript")
          fi
          
          if [[ "$py_status" == "failure" ]]; then
            failed_jobs+=("Python")
          fi
          
          if [[ "$php_status" == "failure" ]]; then
            failed_jobs+=("PHP")
          fi
          
          if [[ "$security_status" == "failure" ]]; then
            failed_jobs+=("Security")
          fi
          
          if [[ ${#failed_jobs[@]} -gt 0 ]]; then
            echo "‚ùå Quality gate failed. Failed jobs: ${failed_jobs[*]}"
            echo "üîß Please fix the issues and try again."
            exit 1
          else
            echo "‚úÖ Quality gate passed! All checks completed successfully."
            echo "üöÄ Ready to merge!"
          fi

      - name: Post success comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ‚úÖ Quality Gate Passed\n\nüéâ All quality checks have passed successfully!\n\n- ‚úÖ Code formatting and linting\n- ‚úÖ Type checking\n- ‚úÖ Tests\n- ‚úÖ Security scans\n\nüöÄ This PR is ready to merge!'
            })

      - name: Post failure comment
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ‚ùå Quality Gate Failed\n\nüîß Some quality checks have failed. Please review the workflow logs and fix the issues.\n\n### Quick fixes you can try:\n\n**For formatting issues:**\n```bash\n./scripts/auto-fix.sh\n```\n\n**For comprehensive check:**\n```bash\n./scripts/quality-check.sh\n```\n\nüìö See [Quality Automation Guide](./QUALITY_AUTOMATION.md) for more details.'
            })