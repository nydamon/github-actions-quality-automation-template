#!/bin/bash\n\n# GitHub Actions Quality Automation Setup Script\n# Detects project languages and sets up comprehensive quality automation\n\nset -e\n\necho \"üöÄ Setting up GitHub Actions Quality Automation...\"\necho \"====================================================\"\n\n# Function to detect project languages\ndetect_languages() {\n    local detected_languages=()\n    \n    if [[ -f \"package.json\" ]] || find . -name \"*.js\" -o -name \"*.jsx\" -o -name \"*.ts\" -o -name \"*.tsx\" -o -name \"*.vue\" -maxdepth 3 | grep -q .; then\n        detected_languages+=(\"javascript\")\n        echo \"‚úÖ Detected: JavaScript/TypeScript/React\"\n    fi\n    \n    if find . -name \"*.py\" -o -name \"requirements.txt\" -o -name \"pyproject.toml\" -o -name \"setup.py\" -maxdepth 3 | grep -q .; then\n        detected_languages+=(\"python\")\n        echo \"‚úÖ Detected: Python\"\n    fi\n    \n    if find . -name \"*.php\" -o -name \"composer.json\" -maxdepth 3 | grep -q .; then\n        detected_languages+=(\"php\")\n        echo \"‚úÖ Detected: PHP\"\n    fi\n    \n    if [[ ${#detected_languages[@]} -eq 0 ]]; then\n        echo \"‚ö†Ô∏è  No supported languages detected. Proceeding with minimal setup.\"\n    fi\n    \n    echo \"${detected_languages[@]}\"\n}\n\n# Function to setup JavaScript/React configuration\nsetup_javascript() {\n    echo \"üîß Setting up JavaScript/React configuration...\"\n    \n    # Create .eslintrc.js if it doesn't exist\n    if [[ ! -f \".eslintrc.js\" ]] && [[ ! -f \".eslintrc.json\" ]] && [[ ! -f \".eslintrc.cjs\" ]]; then\n        curl -s -o .eslintrc.js https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/.eslintrc.js\n        echo \"   ‚úÖ Created .eslintrc.js\"\n    fi\n    \n    # Create .prettierrc if it doesn't exist\n    if [[ ! -f \".prettierrc\" ]] && [[ ! -f \".prettierrc.json\" ]] && [[ ! -f \"prettier.config.js\" ]]; then\n        curl -s -o .prettierrc https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/.prettierrc\n        echo \"   ‚úÖ Created .prettierrc\"\n    fi\n    \n    # Update package.json scripts\n    if [[ -f \"package.json\" ]]; then\n        # Create backup\n        cp package.json package.json.backup\n        \n        # Add quality scripts using jq if available\n        if command -v jq &> /dev/null; then\n            jq '.scripts += {\n              \"auto-fix:preview\": \"eslint . --fix-dry-run --format=compact\",\n              \"auto-fix:apply\": \"eslint . --fix && prettier --write .\",\n              \"quality:check\": \"npm run lint && npm run type-check\",\n              \"lint\": \"eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0\",\n              \"lint:fix\": \"eslint . --ext .js,.jsx,.ts,.tsx --fix\",\n              \"type-check\": \"tsc --noEmit\",\n              \"test:coverage\": \"npm test -- --coverage --watchAll=false\"\n            }' package.json > package.json.tmp && mv package.json.tmp package.json\n            echo \"   ‚úÖ Updated package.json scripts\"\n        else\n            echo \"   ‚ö†Ô∏è  jq not found. Please manually add quality scripts to package.json\"\n        fi\n    fi\n}\n\n# Function to setup Python configuration\nsetup_python() {\n    echo \"üîß Setting up Python configuration...\"\n    \n    # Create pyproject.toml if it doesn't exist\n    if [[ ! -f \"pyproject.toml\" ]]; then\n        curl -s -o pyproject.toml https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/pyproject.toml\n        echo \"   ‚úÖ Created pyproject.toml\"\n    fi\n    \n    # Create .flake8 if it doesn't exist\n    if [[ ! -f \".flake8\" ]] && [[ ! -f \"setup.cfg\" ]]; then\n        curl -s -o .flake8 https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/.flake8\n        echo \"   ‚úÖ Created .flake8\"\n    fi\n}\n\n# Function to setup PHP configuration\nsetup_php() {\n    echo \"üîß Setting up PHP configuration...\"\n    \n    # Create .php-cs-fixer.php if it doesn't exist\n    if [[ ! -f \".php-cs-fixer.php\" ]]; then\n        curl -s -o .php-cs-fixer.php https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/.php-cs-fixer.php\n        echo \"   ‚úÖ Created .php-cs-fixer.php\"\n    fi\n    \n    # Create phpstan.neon if it doesn't exist\n    if [[ ! -f \"phpstan.neon\" ]] && [[ ! -f \"phpstan.neon.dist\" ]]; then\n        curl -s -o phpstan.neon https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/phpstan.neon\n        echo \"   ‚úÖ Created phpstan.neon\"\n    fi\n}\n\n# Function to setup pre-commit hooks\nsetup_precommit() {\n    echo \"üîß Setting up pre-commit hooks...\"\n    \n    # Create .pre-commit-config.yaml\n    curl -s -o .pre-commit-config.yaml https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/.pre-commit-config.yaml\n    echo \"   ‚úÖ Created .pre-commit-config.yaml\"\n    \n    # Install pre-commit hooks if pre-commit is available\n    if command -v pre-commit &> /dev/null; then\n        echo \"üîß Installing pre-commit hooks...\"\n        pre-commit install\n        echo \"   ‚úÖ Pre-commit hooks installed\"\n    else\n        echo \"   ‚ö†Ô∏è  pre-commit not found. Please install with: pip install pre-commit\"\n        echo \"   üìù Then run: pre-commit install\"\n    fi\n}\n\n# Function to create GitHub workflows directory and files\nsetup_github_workflows() {\n    echo \"üîß Setting up GitHub Actions workflows...\"\n    \n    # Create .github/workflows directory\n    mkdir -p .github/workflows\n    \n    # Download workflow files\n    curl -s -o .github/workflows/quality.yml https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/.github/workflows/quality.yml\n    curl -s -o .github/workflows/auto-fix.yml https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/.github/workflows/auto-fix.yml\n    curl -s -o .github/workflows/test-enforcement.yml https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/.github/workflows/test-enforcement.yml\n    \n    echo \"   ‚úÖ Created GitHub Actions workflows\"\n}\n\n# Function to create development scripts\nsetup_dev_scripts() {\n    echo \"üîß Setting up development scripts...\"\n    \n    # Create scripts directory\n    mkdir -p scripts\n    \n    # Download scripts\n    curl -s -o scripts/quality-check.sh https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/scripts/quality-check.sh\n    curl -s -o scripts/auto-fix.sh https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/scripts/auto-fix.sh\n    curl -s -o scripts/test-requirements.sh https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/scripts/test-requirements.sh\n    \n    # Make scripts executable\n    chmod +x scripts/*.sh\n    \n    echo \"   ‚úÖ Created development scripts\"\n}\n\n# Function to create IDE configuration files\nsetup_ide_configs() {\n    echo \"üîß Setting up IDE configurations...\"\n    \n    # Create .vscode directory and settings\n    mkdir -p .vscode\n    \n    # Download VS Code configurations\n    curl -s -o .vscode/settings.json https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/.vscode/settings.json\n    curl -s -o .vscode/extensions.json https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/.vscode/extensions.json\n    \n    echo \"   ‚úÖ Created IDE configurations\"\n}\n\n# Function to create documentation\nsetup_documentation() {\n    echo \"üìù Creating documentation...\"\n    \n    # Download documentation\n    curl -s -o QUALITY_AUTOMATION.md https://raw.githubusercontent.com/nydamon/github-actions-quality-automation-template/main/QUALITY_AUTOMATION.md\n    \n    echo \"   ‚úÖ Created QUALITY_AUTOMATION.md\"\n}\n\n# Main execution\necho \"üîç Detecting project languages...\"\nlanguages=$(detect_languages)\necho \"\"\n\n# Setup based on detected languages\nfor language in $languages; do\n    case $language in\n        \"javascript\")\n            setup_javascript\n            ;;\n        \"python\")\n            setup_python\n            ;;\n        \"php\")\n            setup_php\n            ;;\n    esac\ndone\n\n# Setup common components\nsetup_precommit\nsetup_github_workflows\nsetup_dev_scripts\nsetup_ide_configs\nsetup_documentation\n\necho \"\"\necho \"üéâ GitHub Actions Quality Automation setup completed!\"\necho \"=====================================\"\necho \"\"\necho \"‚úÖ What was set up:\"\necho \"   - Language-specific configurations\"\necho \"   - Pre-commit hooks\"\necho \"   - GitHub Actions workflows\"\necho \"   - Development scripts\"\necho \"   - IDE configurations\"\necho \"   - Documentation\"\necho \"\"\necho \"üöÄ Next steps:\"\necho \"   1. Review and customize configurations for your project\"\necho \"   2. Install pre-commit: pip install pre-commit && pre-commit install\"\necho \"   3. Run quality check: ./scripts/quality-check.sh\"\necho \"   4. Read the guide: cat QUALITY_AUTOMATION.md\"\necho \"\"\necho \"üí° Need help? Check QUALITY_AUTOMATION.md for detailed instructions!\"\necho \"üîó Template repo: https://github.com/nydamon/github-actions-quality-automation-template\"\n